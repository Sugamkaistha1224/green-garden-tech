
import { useState, useEffect } from 'react';
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';
import { Button } from '@/components/ui/button';
import { Label } from '@/components/ui/label';
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';
import { Switch } from '@/components/ui/switch';
import { Settings, Thermometer, Palette, Bell, Download, Trash2, Moon, Sun, Monitor } from 'lucide-react';
import { useToast } from '@/hooks/use-toast';
import { useTheme } from '@/contexts/ThemeContext';

interface UserSettings {
  temperatureUnit: 'celsius' | 'fahrenheit';
  notifications: boolean;
  autoSave: boolean;
  defaultView: 'grid' | 'list';
}

export const SettingsPanel = () => {
  const [settings, setSettings] = useState<UserSettings>({
    temperatureUnit: 'celsius',
    notifications: true,
    autoSave: true,
    defaultView: 'grid'
  });
  const { toast } = useToast();
  const { theme, setTheme } = useTheme();

  useEffect(() => {
    // Load settings from localStorage
    const savedSettings = localStorage.getItem('garden-app-settings');
    if (savedSettings) {
      setSettings(JSON.parse(savedSettings));
    }
  }, []);

  const updateSetting = <K extends keyof UserSettings>(key: K, value: UserSettings[K]) => {
    const newSettings = { ...settings, [key]: value };
    setSettings(newSettings);
    localStorage.setItem('garden-app-settings', JSON.stringify(newSettings));
    
    toast({
      title: "Settings Updated",
      description: "Your preferences have been saved.",
    });
  };

  const exportSettings = () => {
    const settingsData = {
      settings,
      theme,
      exportDate: new Date().toISOString(),
      version: '1.0'
    };

    const content = `Smart Gardening Assistant - Settings Export

Export Date: ${new Date().toLocaleString()}
Version: 1.0

SETTINGS:
=========
Temperature Unit: ${settings.temperatureUnit}
Theme: ${theme}
Notifications: ${settings.notifications ? 'Enabled' : 'Disabled'}
Auto-save: ${settings.autoSave ? 'Enabled' : 'Disabled'}
Default View: ${settings.defaultView}

---
Generated by Smart Gardening Assistant
    `;

    const blob = new Blob([content], { type: 'text/plain' });
    const url = URL.createObjectURL(blob);
    const a = document.createElement('a');
    a.href = url;
    a.download = 'garden-app-settings.txt';
    document.body.appendChild(a);
    a.click();
    document.body.removeChild(a);
    URL.revokeObjectURL(url);

    toast({
      title: "Settings Exported",
      description: "Your settings have been downloaded.",
    });
  };

  const resetSettings = () => {
    const defaultSettings: UserSettings = {
      temperatureUnit: 'celsius',
      notifications: true,
      autoSave: true,
      defaultView: 'grid'
    };
    
    setSettings(defaultSettings);
    localStorage.setItem('garden-app-settings', JSON.stringify(defaultSettings));
    setTheme('light');
    
    toast({
      title: "Settings Reset",
      description: "All settings have been restored to defaults.",
    });
  };

  const getThemeIcon = () => {
    switch (theme) {
      case 'light':
        return Sun;
      case 'dark':
        return Moon;
      case 'system':
        return Monitor;
      default:
        return Palette;
    }
  };

  const ThemeIcon = getThemeIcon();

  return (
    <div className="space-y-4 sm:space-y-6 px-4 sm:px-0">
      <Card>
        <CardHeader>
          <CardTitle className="flex items-center space-x-2 text-lg sm:text-xl">
            <Settings className="h-5 w-5 text-garden-green" />
            <span>App Settings</span>
          </CardTitle>
          <CardDescription className="text-sm sm:text-base">
            Customize your Smart Gardening Assistant experience
          </CardDescription>
        </CardHeader>
        <CardContent className="space-y-6">
          {/* Theme Selection */}
          <div className="space-y-2">
            <Label className="flex items-center space-x-2">
              <ThemeIcon className="h-4 w-4" />
              <span>Appearance</span>
            </Label>
            <Select value={theme} onValueChange={setTheme}>
              <SelectTrigger>
                <SelectValue />
              </SelectTrigger>
              <SelectContent>
                <SelectItem value="light">
                  <div className="flex items-center space-x-2">
                    <Sun className="h-4 w-4" />
                    <span>Light</span>
                  </div>
                </SelectItem>
                <SelectItem value="dark">
                  <div className="flex items-center space-x-2">
                    <Moon className="h-4 w-4" />
                    <span>Dark</span>
                  </div>
                </SelectItem>
                <SelectItem value="system">
                  <div className="flex items-center space-x-2">
                    <Monitor className="h-4 w-4" />
                    <span>System</span>
                  </div>
                </SelectItem>
              </SelectContent>
            </Select>
          </div>

          {/* Temperature Unit */}
          <div className="space-y-2">
            <Label className="flex items-center space-x-2">
              <Thermometer className="h-4 w-4" />
              <span>Temperature Unit</span>
            </Label>
            <Select 
              value={settings.temperatureUnit} 
              onValueChange={(value: 'celsius' | 'fahrenheit') => updateSetting('temperatureUnit', value)}
            >
              <SelectTrigger>
                <SelectValue />
              </SelectTrigger>
              <SelectContent>
                <SelectItem value="celsius">Celsius (°C)</SelectItem>
                <SelectItem value="fahrenheit">Fahrenheit (°F)</SelectItem>
              </SelectContent>
            </Select>
          </div>

          {/* Default View */}
          <div className="space-y-2">
            <Label>Default View</Label>
            <Select 
              value={settings.defaultView} 
              onValueChange={(value: 'grid' | 'list') => updateSetting('defaultView', value)}
            >
              <SelectTrigger>
                <SelectValue />
              </SelectTrigger>
              <SelectContent>
                <SelectItem value="grid">Grid View</SelectItem>
                <SelectItem value="list">List View</SelectItem>
              </SelectContent>
            </Select>
          </div>

          {/* Toggles */}
          <div className="space-y-4">
            <div className="flex items-center justify-between">
              <Label className="flex items-center space-x-2">
                <Bell className="h-4 w-4" />
                <span>Notifications</span>
              </Label>
              <Switch 
                checked={settings.notifications}
                onCheckedChange={(checked) => updateSetting('notifications', checked)}
              />
            </div>

            <div className="flex items-center justify-between">
              <Label>Auto-save Predictions</Label>
              <Switch 
                checked={settings.autoSave}
                onCheckedChange={(checked) => updateSetting('autoSave', checked)}
              />
            </div>
          </div>
        </CardContent>
      </Card>

      {/* Actions */}
      <Card>
        <CardHeader>
          <CardTitle>Data Management</CardTitle>
          <CardDescription>
            Export or reset your settings and data
          </CardDescription>
        </CardHeader>
        <CardContent>
          <div className="flex flex-col sm:flex-row gap-3">
            <Button onClick={exportSettings} variant="outline" className="flex-1">
              <Download className="h-4 w-4 mr-2" />
              Export Settings
            </Button>
            <Button onClick={resetSettings} variant="destructive" className="flex-1">
              <Trash2 className="h-4 w-4 mr-2" />
              Reset to Defaults
            </Button>
          </div>
        </CardContent>
      </Card>

      {/* Privacy Notice */}
      <Card className="bg-green-50 dark:bg-green-950/20 border-green-200 dark:border-green-800">
        <CardContent className="pt-6">
          <div className="flex items-start space-x-3">
            <div className="bg-green-500 rounded-full p-2">
              <Settings className="h-4 w-4 text-white" />
            </div>
            <div>
              <h3 className="font-semibold text-green-900 dark:text-green-100 mb-2">Privacy & Data</h3>
              <p className="text-green-800 dark:text-green-200 text-sm">
                All settings are stored locally on your device. No personal data is transmitted to external servers.
              </p>
            </div>
          </div>
        </CardContent>
      </Card>
    </div>
  );
};
