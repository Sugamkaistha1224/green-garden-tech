import { useState, useEffect } from 'react';
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';
import { Badge } from '@/components/ui/badge';
import { Button } from '@/components/ui/button';
import { BarChart3, Clock, Calendar, Leaf, Camera, Brain, Download, Trash2, Cloud } from 'lucide-react';

interface ActivityEntry {
  id: string;
  feature: 'planner' | 'disease' | 'weather' | 'chat' | 'dashboard';
  timestamp: Date;
  details: string;
}

interface UserStats {
  totalSessions: number;
  totalTimeSpent: number; // in minutes
  featuresUsed: {
    planner: number;
    disease: number;
    weather: number;
    chat: number;
  };
  lastActivity: Date | null;
}

export const UserDashboard = () => {
  const [stats, setStats] = useState<UserStats>({
    totalSessions: 0,
    totalTimeSpent: 0,
    featuresUsed: {
      planner: 0,
      disease: 0,
      weather: 0,
      chat: 0
    },
    lastActivity: null
  });
  const [activities, setActivities] = useState<ActivityEntry[]>([]);

  useEffect(() => {
    // Load stats and activities from localStorage
    const savedStats = localStorage.getItem('garden-app-stats');
    const savedActivities = localStorage.getItem('garden-app-activities');

    if (savedStats) {
      const parsedStats = JSON.parse(savedStats);
      if (parsedStats.lastActivity) {
        parsedStats.lastActivity = new Date(parsedStats.lastActivity);
      }
      setStats(parsedStats);
    }

    if (savedActivities) {
      const parsedActivities = JSON.parse(savedActivities).map((activity: any) => ({
        ...activity,
        timestamp: new Date(activity.timestamp)
      }));
      setActivities(parsedActivities);
    }

    // Record current session
    recordActivity('dashboard', 'Viewed dashboard');
  }, []);

  const recordActivity = (feature: ActivityEntry['feature'], details: string) => {
    const newActivity: ActivityEntry = {
      id: Date.now().toString(),
      feature,
      timestamp: new Date(),
      details
    };

    const updatedActivities = [newActivity, ...activities].slice(0, 50); // Keep last 50 activities
    const updatedStats = {
      ...stats,
      totalSessions: stats.totalSessions + 1,
      totalTimeSpent: stats.totalTimeSpent + Math.floor(Math.random() * 10) + 1, // Simulate time spent
      featuresUsed: {
        ...stats.featuresUsed,
        [feature]: stats.featuresUsed[feature] + 1
      },
      lastActivity: new Date()
    };

    setActivities(updatedActivities);
    setStats(updatedStats);

    // Save to localStorage
    localStorage.setItem('garden-app-stats', JSON.stringify(updatedStats));
    localStorage.setItem('garden-app-activities', JSON.stringify(updatedActivities));
  };

  const clearHistory = () => {
    if (confirm('Are you sure you want to clear all activity history? This cannot be undone.')) {
      const clearedStats = {
        totalSessions: 0,
        totalTimeSpent: 0,
        featuresUsed: {
          planner: 0,
          disease: 0,
          weather: 0,
          chat: 0
        },
        lastActivity: null
      };
      
      setStats(clearedStats);
      setActivities([]);
      
      localStorage.removeItem('garden-app-stats');
      localStorage.removeItem('garden-app-activities');
    }
  };

  const downloadHistory = () => {
    const historyData = {
      stats,
      activities: activities.map(activity => ({
        ...activity,
        timestamp: activity.timestamp.toISOString()
      }))
    };

    const content = `Smart Gardening Assistant - Activity Report

USAGE STATISTICS:
=================
Total Sessions: ${stats.totalSessions}
Total Time Spent: ${Math.floor(stats.totalTimeSpent / 60)}h ${stats.totalTimeSpent % 60}m
Last Activity: ${stats.lastActivity ? stats.lastActivity.toLocaleString() : 'Never'}

FEATURE USAGE:
==============
AI Gardening Planner: ${stats.featuresUsed.planner} times
Disease Detection: ${stats.featuresUsed.disease} times
Weather Integration: ${stats.featuresUsed.weather} times
AI Gardening Support: ${stats.featuresUsed.chat} times

ACTIVITY HISTORY:
=================
${activities.map(activity => 
  `${activity.timestamp.toLocaleString()} - ${getFeatureName(activity.feature)}: ${activity.details}`
).join('\n')}

---
Generated by Smart Gardening Assistant
Your prediction history is stored locally and only accessible to you.
    `;

    const blob = new Blob([content], { type: 'text/plain' });
    const url = URL.createObjectURL(blob);
    const a = document.createElement('a');
    a.href = url;
    a.download = 'gardening-activity-history.txt';
    document.body.appendChild(a);
    a.click();
    document.body.removeChild(a);
    URL.revokeObjectURL(url);
  };

  const getFeatureName = (feature: string) => {
    const names = {
      planner: 'AI Gardening Planner',
      disease: 'Disease Detection',
      weather: 'Weather Integration',
      chat: 'AI Gardening Support',
      dashboard: 'Dashboard'
    };
    return names[feature as keyof typeof names] || feature;
  };

  const getFeatureIcon = (feature: string) => {
    const icons = {
      planner: Brain,
      disease: Camera,
      weather: Cloud,
      chat: Leaf,
      dashboard: BarChart3
    };
    const Icon = icons[feature as keyof typeof icons] || BarChart3;
    return <Icon className="h-4 w-4" />;
  };

  const getFeatureBadge = (feature: string) => {
    const colors = {
      planner: 'bg-green-100 text-green-800',
      disease: 'bg-red-100 text-red-800',
      weather: 'bg-blue-100 text-blue-800',
      chat: 'bg-purple-100 text-purple-800',
      dashboard: 'bg-gray-100 text-gray-800'
    };
    return colors[feature as keyof typeof colors] || 'bg-gray-100 text-gray-800';
  };

  const totalFeatureUsage = Object.values(stats.featuresUsed).reduce((sum, count) => sum + count, 0);

  return (
    <div className="space-y-8">
      {/* Statistics Cards */}
      <div className="grid grid-cols-1 md:grid-cols-4 gap-6">
        <Card>
          <CardContent className="pt-6">
            <div className="flex items-center justify-between">
              <div>
                <p className="text-sm font-medium text-muted-foreground">Total Sessions</p>
                <p className="text-2xl font-bold text-garden-green">{stats.totalSessions}</p>
              </div>
              <BarChart3 className="h-8 w-8 text-garden-green" />
            </div>
          </CardContent>
        </Card>

        <Card>
          <CardContent className="pt-6">
            <div className="flex items-center justify-between">
              <div>
                <p className="text-sm font-medium text-muted-foreground">Time Spent</p>
                <p className="text-2xl font-bold text-garden-green">
                  {Math.floor(stats.totalTimeSpent / 60)}h {stats.totalTimeSpent % 60}m
                </p>
              </div>
              <Clock className="h-8 w-8 text-garden-green" />
            </div>
          </CardContent>
        </Card>

        <Card>
          <CardContent className="pt-6">
            <div className="flex items-center justify-between">
              <div>
                <p className="text-sm font-medium text-muted-foreground">Features Used</p>
                <p className="text-2xl font-bold text-garden-green">{totalFeatureUsage}</p>
              </div>
              <Leaf className="h-8 w-8 text-garden-green" />
            </div>
          </CardContent>
        </Card>

        <Card>
          <CardContent className="pt-6">
            <div className="flex items-center justify-between">
              <div>
                <p className="text-sm font-medium text-muted-foreground">Last Activity</p>
                <p className="text-sm font-bold text-garden-green">
                  {stats.lastActivity ? stats.lastActivity.toLocaleDateString() : 'Never'}
                </p>
              </div>
              <Calendar className="h-8 w-8 text-garden-green" />
            </div>
          </CardContent>
        </Card>
      </div>

      {/* Feature Usage Breakdown */}
      <Card>
        <CardHeader>
          <CardTitle>Feature Usage Breakdown</CardTitle>
          <CardDescription>
            Track which features you use most frequently
          </CardDescription>
        </CardHeader>
        <CardContent>
          <div className="space-y-4">
            {Object.entries(stats.featuresUsed).map(([feature, count]) => (
              <div key={feature} className="flex items-center justify-between">
                <div className="flex items-center space-x-3">
                  {getFeatureIcon(feature)}
                  <span className="font-medium">{getFeatureName(feature)}</span>
                </div>
                <div className="flex items-center space-x-3">
                  <div className="w-32 bg-gray-200 rounded-full h-2">
                    <div
                      className="bg-garden-green h-2 rounded-full"
                      style={{
                        width: totalFeatureUsage > 0 ? `${(count / totalFeatureUsage) * 100}%` : '0%'
                      }}
                    ></div>
                  </div>
                  <span className="text-sm font-semibold w-8 text-right">{count}</span>
                </div>
              </div>
            ))}
          </div>
        </CardContent>
      </Card>

      {/* Recent Activity */}
      <Card>
        <CardHeader>
          <div className="flex items-center justify-between">
            <div>
              <CardTitle>Recent Activity</CardTitle>
              <CardDescription>
                Your latest interactions with the Smart Gardening Assistant
              </CardDescription>
            </div>
            <div className="flex space-x-2">
              <Button onClick={downloadHistory} variant="outline" size="sm">
                <Download className="h-4 w-4 mr-2" />
                Download
              </Button>
              <Button onClick={clearHistory} variant="outline" size="sm">
                <Trash2 className="h-4 w-4 mr-2" />
                Clear History
              </Button>
            </div>
          </div>
        </CardHeader>
        <CardContent>
          {activities.length > 0 ? (
            <div className="space-y-3 max-h-96 overflow-y-auto">
              {activities.map((activity) => (
                <div key={activity.id} className="flex items-center justify-between p-3 border rounded-lg">
                  <div className="flex items-center space-x-3">
                    <Badge className={getFeatureBadge(activity.feature)}>
                      {getFeatureIcon(activity.feature)}
                      <span className="ml-1">{getFeatureName(activity.feature)}</span>
                    </Badge>
                    <span className="text-sm">{activity.details}</span>
                  </div>
                  <span className="text-xs text-muted-foreground">
                    {activity.timestamp.toLocaleString()}
                  </span>
                </div>
              ))}
            </div>
          ) : (
            <div className="text-center py-8 text-muted-foreground">
              <BarChart3 className="h-12 w-12 mx-auto mb-4 opacity-50" />
              <p>No activity recorded yet.</p>
              <p className="text-sm">Start using the app features to see your activity here!</p>
            </div>
          )}
        </CardContent>
      </Card>

      {/* Privacy Notice */}
      <Card className="bg-blue-50 border-blue-200">
        <CardContent className="pt-6">
          <div className="flex items-start space-x-3">
            <div className="bg-blue-500 rounded-full p-2">
              <BarChart3 className="h-4 w-4 text-white" />
            </div>
            <div>
              <h3 className="font-semibold text-blue-900 mb-2">Privacy Notice</h3>
              <p className="text-blue-800 text-sm">
                Your prediction history is stored locally or securely in your account. 
                This information is only accessible to you and not shared with third parties.
              </p>
            </div>
          </div>
        </CardContent>
      </Card>
    </div>
  );
};
